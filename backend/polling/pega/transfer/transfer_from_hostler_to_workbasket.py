from backend.colored_logger import setup_logger

logger = setup_logger(__name__)


class TransferFromHostlerToWorkbasket:
    """
    Transfers a task from a hostler (checker) to the workbasket using the Pega API's full multi-step workflow.
    Requires:
      - task_id: e.g. "T-34246622"
      - checker_id: hostler user id, e.g. "222982"
      - row_page: e.g. "D_TeamMembersByWorkGroup_pa574308029294101pz.pxResults(4)"
      - base_ref: e.g. "D_TeamMembersByWorkGroup_pa574308029294101pz"
      - pzHarnessID, pzTransactionId, async_client, base_url (injected via set_pega_data)
    """

    def __init__(self, task_id, checker_id, row_page, base_ref):
        self.task_id = task_id
        self.checker_id = checker_id
        self.row_page = row_page  # e.g. "D_TeamMembersByWorkGroup_pa574308029294101pz.pxResults(4)"
        self.base_ref = base_ref  # e.g. "D_TeamMembersByWorkGroup_pa574308029294101pz"
        self.pzHarnessID = None
        self.pzTransactionId = None
        self.async_client = None
        self.base_url = None

    def set_pega_data(self, base_url, pzHarnessID, pzTransactionId, async_client):
        self.base_url = base_url.rstrip('/')
        self.pzHarnessID = pzHarnessID
        self.pzTransactionId = pzTransactionId
        self.async_client = async_client

    async def step1_grid_action(self):
        """
        Triggers the grid action to select the appropriate hostler's row.
        """
        url = (
            f"{self.base_url}/!STANDARD"
            f"?pzTransactionId={self.pzTransactionId}"
            f"&pzFromFrame=&pzPrimaryPageName=pyPortalHarness&AJAXTrackID=6"
            f"&eventSrcSection=Data-Portal.TeamMembersGrid"
        )
        location = (
            f"pyActivity=pzPrepareAssignment"
            f"&UITemplatingStatus=Y"
            f"&NewTaskStatus=DisplayUserWorkList"
            f"&TaskIndex="
            f"&StreamType=Rule-HTML-Section"
            f"&FieldError="
            f"&FormError="
            f"&pyCustomError="
            f"&bExcludeLegacyJS=true"
            f"&ModalSection=pzModalTemplate"
            f"&modalStyle="
            f"&IgnoreSectionSubmit=true"
            f"&bInvokedFromControl=true"
            f"&BaseReference="
            f"&isModalFlowAction=true"
            f"&bIsModal=true"
            f"&bIsOverlay=false"
            f"&StreamClass=Rule-HTML-Section"
            f"&UITemplatingScriptLoad=true"
            f"&ActionSection=pzModalTemplate"
            f"&rowPage={self.row_page}"
            f"&GridAction=true"
            f"&BaseThread=STANDARD"
            f"&pzHarnessID={self.pzHarnessID}"
        )
        payload = (
            "pyActivity=pzRunActionWrapper"
            "&$OCompositeGadget="
            "&$OControlMenu="
            "&$ODesktopWrapperInclude="
            "&$ODeterminePortalTop="
            "&$ODynamicContainerFrameLess="
            "&$ODynamicLayout="
            "&$ODynamicLayoutCell="
            "&$OEvalDOMScripts_Include="
            "&$OForm="
            "&$OGapIdentifier="
            "&$OGridInc="
            "&$OHarness="
            "&$OHarnessStaticJSEnd="
            "&$OHarnessStaticJSStart="
            "&$OHarnessStaticScriptsClientValidation="
            "&$OHarnessStaticScriptsExprCal="
            "&$OLaunchFlow="
            "&$OMenuBar="
            "&$OMenuBarOld="
            "&$OMobileAppNotify="
            "&$OOperatorPresenceStatusScripts="
            "&$OPMCPortalStaticScripts="
            "&$ORepeatingDynamicLayout="
            "&$OSessionUser="
            "&$OSurveyStaticScripts="
            "&$OWorkformStyles="
            "&$Ocosmoslocale="
            "&$OmenubarInclude="
            "&$OpxButton="
            "&$OpxDisplayText="
            "&$OpxDropdown="
            "&$OpxDynamicContainer="
            "&$OpxHarnessContent="
            "&$OpxHeaderCell="
            "&$OpxHidden="
            "&$OpxIcon="
            "&$OpxLayoutContainer="
            "&$OpxLayoutHeader="
            "&$OpxLink="
            "&$OpxMenu="
            "&$OpxNonTemplate="
            "&$OpxSection="
            "&$OpxTextInput="
            "&$OpxVisible="
            "&$OpxWorkArea="
            "&$OpxWorkAreaContent="
            "&$OpyDirtyCheckConfirm="
            "&$OpyWorkFormStandardEnd="
            "&$OpyWorkFormStandardStart="
            "&$Opycosmoscustomstyles="
            "&$OpzAppLauncher="
            "&$OpzDecimalInclude="
            "&$OpzFrameLessDCScripts="
            "&$OpzHarnessInlineScriptsEnd="
            "&$OpzHarnessInlineScriptsStart="
            "&$OpzPegaCompositeGadgetScripts="
            "&$OpzRuntimeToolsBar="
            "&$Opzpega_ui_harnesscontext="
            "&$Ordlincludes="
            "&$OxmlDocumentInclude="
            "&ThreadName="
            f"&rowPage={self.row_page}"
            f"&Location={location}"
            f"&PagesToCopy={self.base_ref}"
            f"&pzHarnessID={self.pzHarnessID}"
            "&UITemplatingStatus=N"
            "&inStandardsMode=true"
            "&eventSrcSection=Data-Portal.TeamMembersGrid"
            "&pzActivity=pzPerformGridAction"
            "&skipReturnResponse=true"
            "&pySubAction=runAct"
        )
        response = await self.async_client.post(url, data=payload)
        logger.debug(f"Step 1 (grid action) status {response.status_code}")
        assert response.status_code == 200
        return response

    async def step2_select_assignment(self, fetch_worklist_pd_key):
        """
        Selects the assignment in the hostler's list.
        """
        url = (
            f"{self.base_url}/!STANDARD"
            f"?pzTransactionId={self.pzTransactionId}"
            f"&pzFromFrame=&pzPrimaryPageName=pyPortalHarness&AJAXTrackID=6"
            "&eventSrcSection=Data-Admin-Operator-ID.WorkListGridsMain"
        )
        payload = (
            f"${fetch_worklist_pd_key}$ppxResults$l1$ppySelected=true"
            "&$OCompositeGadget="
            "&$OControlMenu="
            "&$ODesktopWrapperInclude="
            "&$ODeterminePortalTop="
            "&$ODynamicContainerFrameLess="
            "&$ODynamicLayout="
            "&$ODynamicLayoutCell="
            "&$OEvalDOMScripts_Include="
            "&$OForm="
            "&$OGapIdentifier="
            "&$OGridInc="
            "&$OHarness="
            "&$OHarnessStaticJSEnd="
            "&$OHarnessStaticJSStart="
            "&$OHarnessStaticScriptsClientValidation="
            "&$OHarnessStaticScriptsExprCal="
            "&$OLaunchFlow="
            "&$OMenuBar="
            "&$OMenuBarOld="
            "&$OMobileAppNotify="
            "&$OOperatorPresenceStatusScripts="
            "&$OPMCPortalStaticScripts="
            "&$ORepeatingDynamicLayout="
            "&$OSessionUser="
            "&$OSurveyStaticScripts="
            "&$OWorkformStyles="
            "&$Ocosmoslocale="
            "&$OmenubarInclude="
            "&$OpxButton="
            "&$OpxDisplayText="
            "&$OpxDropdown="
            "&$OpxDynamicContainer="
            "&$OpxHarnessContent="
            "&$OpxHeaderCell="
            "&$OpxHidden="
            "&$OpxIcon="
            "&$OpxLayoutContainer="
            "&$OpxLayoutHeader="
            "&$OpxLink="
            "&$OpxMenu="
            "&$OpxNonTemplate="
            "&$OpxSection="
            "&$OpxTextInput="
            "&$OpxVisible="
            "&$OpxWorkArea="
            "&$OpxWorkAreaContent="
            "&$OpyDirtyCheckConfirm="
            "&$OpyWorkFormStandardEnd="
            "&$OpyWorkFormStandardStart="
            "&$Opycosmoscustomstyles="
            "&$OpzAppLauncher="
            "&$OpzDecimalInclude="
            "&$OpzFrameLessDCScripts="
            "&$OpzHarnessInlineScriptsEnd="
            "&$OpzHarnessInlineScriptsStart="
            "&$OpzPegaCompositeGadgetScripts="
            "&$OpzRuntimeToolsBar="
            "&$Opzpega_ui_harnesscontext="
            "&$Ordlincludes="
            "&$OxmlDocumentInclude="
            "&$OCheckbox="
            "&pzuiactionzzz="
            "&pyPropertyTarget=%24PD_FetchWorkListAssignments_pa579692650274020pz%24ppxResults%24l1%24ppySelected"
            "&updateDOM=true"
            f"&BaseReference={self.row_page}"
            "&ContextPage="
            "&pzKeepPageMessages=true"
            "&pega_RLindex=1"
            "&PVClientVal=true"
            "&UITemplatingStatus=N"
            "&inStandardsMode=true"
            f"&pzHarnessID={self.pzHarnessID}"
            "&eventSrcSection=Data-Admin-Operator-ID.WorkListGridsMain"
        )
        response = await self.async_client.post(url, data=payload)
        logger.debug(f"Step 2 (select assignment) status {response.status_code}")
        assert response.status_code == 200
        return response

    async def step3_reload_worklist_grid(self, section_id_list, fetch_worklist_pd_key):
        """
        Reloads the grid for the selected hostler assignment.
        """
        url = (
            f"{self.base_url}/!STANDARD"
            f"?pzTransactionId={self.pzTransactionId}"
            f"&pzFromFrame=&pzPrimaryPageName=pyPortalHarness&AJAXTrackID=6"
            "&eventSrcSection=Data-Admin-Operator-ID.WorkListGridsMain"
        )
        payload = (
            "pyActivity=ReloadSection"
            "&D_FetchWorkListAssignmentsPpxResults1colWidthGBL="
            "&D_FetchWorkListAssignmentsPpxResults1colWidthGBR="
            f"&SectionIDList={section_id_list}"
            f"&${fetch_worklist_pd_key}$ppxResults$l1$ppySelected=true"
            "&strIndexInList=%5B%7B%22pyPropRef%22%3A%22D_FetchWorkListAssignments_pa579692650274020pz.pxResults(1)%22%7D%5D"
            "&PreActivitiesList="
            "&sectionParam="
            "&ActivityParams=PageListProperty%3DD_FetchWorkListAssignments_pa579692650274020pz.pxResults%26refreshLayout%3Dfalse%26EditRow%3Dfalse%26gridAction%3DREFRESHROWS%26KeepGridMessages%3Dfalse"
            "&$OCompositeGadget="
            "&$OControlMenu="
            "&$ODesktopWrapperInclude="
            "&$ODeterminePortalTop="
            "&$ODynamicContainerFrameLess="
            "&$ODynamicLayout="
            "&$ODynamicLayoutCell="
            "&$OEvalDOMScripts_Include="
            "&$OForm="
            "&$OGapIdentifier="
            "&$OGridInc="
            "&$OHarness="
            "&$OHarnessStaticJSEnd="
            "&$OHarnessStaticJSStart="
            "&$OHarnessStaticScriptsClientValidation="
            "&$OHarnessStaticScriptsExprCal="
            "&$OLaunchFlow="
            "&$OMenuBar="
            "&$OMenuBarOld="
            "&$OMobileAppNotify="
            "&$OOperatorPresenceStatusScripts="
            "&$OPMCPortalStaticScripts="
            "&$ORepeatingDynamicLayout="
            "&$OSessionUser="
            "&$OSurveyStaticScripts="
            "&$OWorkformStyles="
            "&$Ocosmoslocale="
            "&$OmenubarInclude="
            "&$OpxButton="
            "&$OpxDisplayText="
            "&$OpxDropdown="
            "&$OpxDynamicContainer="
            "&$OpxHarnessContent="
            "&$OpxHeaderCell="
            "&$OpxHidden="
            "&$OpxIcon="
            "&$OpxLayoutContainer="
            "&$OpxLayoutHeader="
            "&$OpxLink="
            "&$OpxMenu="
            "&$OpxNonTemplate="
            "&$OpxSection="
            "&$OpxTextInput="
            "&$OpxVisible="
            "&$OpxWorkArea="
            "&$OpxWorkAreaContent="
            "&$OpyDirtyCheckConfirm="
            "&$OpyWorkFormStandardEnd="
            "&$OpyWorkFormStandardStart="
            "&$Opycosmoscustomstyles="
            "&$OpzAppLauncher="
            "&$OpzDecimalInclude="
            "&$OpzFrameLessDCScripts="
            "&$OpzHarnessInlineScriptsEnd="
            "&$OpzHarnessInlineScriptsStart="
            "&$OpzPegaCompositeGadgetScripts="
            "&$OpzRuntimeToolsBar="
            "&$Opzpega_ui_harnesscontext="
            "&$Ordlincludes="
            "&$OxmlDocumentInclude="
            "&$OCheckbox="
            "&pzKeepPageMessages=true"
            "&strPHarnessClass=ESTES-OPS-YardMgmt-UIPages"
            "&strPHarnessPurpose=YardCoordinator"
            "&UITemplatingStatus=N"
            "&StreamName=WorkListGridsMain"
            f"&BaseReference={self.row_page}"
            "&StreamClass=Rule-HTML-Section"
            "&partialRefresh=true"
            "&partialTrigger=editRowD_FetchWorkListAssignments.pxResults1"
            "&ReadOnly=0"
            "&bClientValidation=true"
            "&PreActivity=pzdoGridAction"
            "&HeaderButtonSectionName=-1"
            "&PagesToRemove="
            f"&pzHarnessID={self.pzHarnessID}"
            "&inStandardsMode=true"
            "&eventSrcSection=Data-Admin-Operator-ID.WorkListGridsMain"
            "&PreDataTransform="
        )
        response = await self.async_client.post(url, data=payload)
        logger.debug(f"Step 3 (reload worklist grid) status {response.status_code}")
        assert response.status_code == 200
        return response

    async def step4_select_hostler_and_submit(self, team_members_pd_key, fetch_worklist_pd_key, section_id_list,
                                              pzuiactionzzz):
        """
        Finalizes the assignment transfer to the hostler.
        """
        url = (
            f"{self.base_url}/!STANDARD"
            f"?pzTransactionId={self.pzTransactionId}"
            f"&pzFromFrame=&pzPrimaryPageName=pyPortalHarness&AJAXTrackID=6"
        )
        payload = (
            f"D_FetchWorkListAssignmentsPpxResults1colWidthGBL="
            f"&D_FetchWorkListAssignmentsPpxResults1colWidthGBR="
            f"&${team_members_pd_key}$ppxResults$l4$ppySelected=true"
            f"&${fetch_worklist_pd_key}$ppxResults$l1$ppySelected=true"
            f"&pzuiactionzzz={pzuiactionzzz}"
            f"&SectionIDList={section_id_list}"
            "&PreActivitiesList="
            "&sectionParam="
            "&ActivityParams="
            "&$OCompositeGadget="
            "&$OControlMenu="
            "&$ODesktopWrapperInclude="
            "&$ODeterminePortalTop="
            "&$ODynamicContainerFrameLess="
            "&$ODynamicLayout="
            "&$ODynamicLayoutCell="
            "&$OEvalDOMScripts_Include="
            "&$OForm="
            "&$OGapIdentifier="
            "&$OGridInc="
            "&$OHarness="
            "&$OHarnessStaticJSEnd="
            "&$OHarnessStaticJSStart="
            "&$OHarnessStaticScriptsClientValidation="
            "&$OHarnessStaticScriptsExprCal="
            "&$OLaunchFlow="
            "&$OMenuBar="
            "&$OMenuBarOld="
            "&$OMobileAppNotify="
            "&$OOperatorPresenceStatusScripts="
            "&$OPMCPortalStaticScripts="
            "&$ORepeatingDynamicLayout="
            "&$OSessionUser="
            "&$OSurveyStaticScripts="
            "&$OWorkformStyles="
            "&$Ocosmoslocale="
            "&$OmenubarInclude="
            "&$OpxButton="
            "&$OpxDisplayText="
            "&$OpxDropdown="
            "&$OpxDynamicContainer="
            "&$OpxHarnessContent="
            "&$OpxHeaderCell="
            "&$OpxHidden="
            "&$OpxIcon="
            "&$OpxLayoutContainer="
            "&$OpxLayoutHeader="
            "&$OpxLink="
            "&$OpxMenu="
            "&$OpxNonTemplate="
            "&$OpxSection="
            "&$OpxTextInput="
            "&$OpxVisible="
            "&$OpxWorkArea="
            "&$OpxWorkAreaContent="
            "&$OpyDirtyCheckConfirm="
            "&$OpyWorkFormStandardEnd="
            "&$OpyWorkFormStandardStart="
            "&$Opycosmoscustomstyles="
            "&$OpzAppLauncher="
            "&$OpzDecimalInclude="
            "&$OpzFrameLessDCScripts="
            "&$OpzHarnessInlineScriptsEnd="
            "&$OpzHarnessInlineScriptsStart="
            "&$OpzPegaCompositeGadgetScripts="
            "&$OpzRuntimeToolsBar="
            "&$Opzpega_ui_harnesscontext="
            "&$Ordlincludes="
            "&$OxmlDocumentInclude="
            "&$OCheckbox="
            "&pyEncodedParameters=true"
            "&pzKeepPageMessages=true"
            "&strPHarnessClass=ESTES-OPS-YardMgmt-UIPages"
            "&strPHarnessPurpose=YardCoordinator"
            "&UITemplatingStatus=N"
            "&StreamName=WorkListGridsMain"
            f"&BaseReference={self.row_page}"
            "&bClientValidation=true"
            "&HeaderButtonSectionName=-1"
            "&PagesToRemove="
            f"&pzHarnessID={self.pzHarnessID}"
            "&inStandardsMode=true"
        )
        response = await self.async_client.post(url, data=payload)
        logger.debug(f"Step 4 (select and submit) status {response.status_code}")
        assert response.status_code == 200
        return response

    async def step5_submit_modal_flow_action(self):
        """
        Submits the modal flow action to finalize transfer.
        """
        url = (
            f"{self.base_url}/!STANDARD"
            f"?pzTransactionId={self.pzTransactionId}"
            f"&pzFromFrame=&pzPrimaryPageName=pyPortalHarness&AJAXTrackID=6"
        )
        payload = (
            "pyActivity=SubmitModalFlowAction"
            "&$OCompositeGadget="
            "&$OControlMenu="
            "&$ODesktopWrapperInclude="
            "&$ODeterminePortalTop="
            "&$ODynamicContainerFrameLess="
            "&$ODynamicLayout="
            "&$ODynamicLayoutCell="
            "&$OEvalDOMScripts_Include="
            "&$OForm="
            "&$OGapIdentifier="
            "&$OGridInc="
            "&$OHarness="
            "&$OHarnessStaticJSEnd="
            "&$OHarnessStaticJSStart="
            "&$OHarnessStaticScriptsClientValidation="
            "&$OHarnessStaticScriptsExprCal="
            "&$OLaunchFlow="
            "&$OMenuBar="
            "&$OMenuBarOld="
            "&$OMobileAppNotify="
            "&$OOperatorPresenceStatusScripts="
            "&$OPMCPortalStaticScripts="
            "&$ORepeatingDynamicLayout="
            "&$OSessionUser="
            "&$OSurveyStaticScripts="
            "&$OWorkformStyles="
            "&$Ocosmoslocale="
            "&$OmenubarInclude="
            "&$OpxButton="
            "&$OpxDisplayText="
            "&$OpxDropdown="
            "&$OpxDynamicContainer="
            "&$OpxHarnessContent="
            "&$OpxHeaderCell="
            "&$OpxHidden="
            "&$OpxIcon="
            "&$OpxLayoutContainer="
            "&$OpxLayoutHeader="
            "&$OpxLink="
            "&$OpxMenu="
            "&$OpxNonTemplate="
            "&$OpxSection="
            "&$OpxTextInput="
            "&$OpxVisible="
            "&$OpxWorkArea="
            "&$OpxWorkAreaContent="
            "&$OpyDirtyCheckConfirm="
            "&$OpyWorkFormStandardEnd="
            "&$OpyWorkFormStandardStart="
            "&$Opycosmoscustomstyles="
            "&$OpzAppLauncher="
            "&$OpzDecimalInclude="
            "&$OpzFrameLessDCScripts="
            "&$OpzHarnessInlineScriptsEnd="
            "&$OpzHarnessInlineScriptsStart="
            "&$OpzPegaCompositeGadgetScripts="
            "&$OpzRuntimeToolsBar="
            "&$Opzpega_ui_harnesscontext="
            "&$Ordlincludes="
            "&$OxmlDocumentInclude="
            "&$OCheckbox="
            "&actionName="
            "&KeepMessages=false"
            "&ModalActionName=DisplayUserWorkList"
            "&modalSection=pzModalTemplate"
            "&bIsOverlay=false"
            f"&InterestPage={self.row_page}"
            "&HarnessType=NEW"
            "&UITemplatingStatus=Y"
            f"&pzHarnessID={self.pzHarnessID}"
            "&inStandardsMode=true"
        )
        response = await self.async_client.post(url, data=payload)
        logger.debug(f"Step 5 (submit modal flow) status {response.status_code}")
        assert response.status_code == 200
        return response

    async def transfer(self, fetch_worklist_pd_key, team_members_pd_key, section_id_list, pzuiactionzzz):
        """
        Runs the full transfer sequence step by step.
        - fetch_worklist_pd_key: e.g. PD_FetchWorkListAssignments_pa579692650274020pz
        - team_members_pd_key: e.g. PD_TeamMembersByWorkGroup_pa574308029294101pz
        - section_id_list: e.g. GID_1751146918475%3A
        - pzuiactionzzz: as extracted from HTML/script
        """
        await self.step1_grid_action()
        await self.step2_select_assignment(fetch_worklist_pd_key)
        await self.step3_reload_worklist_grid(section_id_list, fetch_worklist_pd_key)
        await self.step4_select_hostler_and_submit(team_members_pd_key, fetch_worklist_pd_key, section_id_list,
                                                   pzuiactionzzz)
        await self.step5_submit_modal_flow_action()
        logger.info(f"Transfer from hostler {self.checker_id} to workbasket complete for task {self.task_id}.")
        return True
